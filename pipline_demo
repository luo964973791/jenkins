pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '172.27.0.8:5000'
        GITLAB_URL = 'http://172.27.0.8:32080/root/demo.git'
        DOCKER_CREDENTIALS_ID = '7bb9b473-44c9-4db0-8ddf-e9d0e26a20fc'
        GITLAB_CREDENTIALS_ID = '5b158f51-7fed-481c-93a4-d6e7fb55b09d'
    }

    stages {
        stage('Git Checkout') {
            steps {
                script {
                    // 使用凭据克隆 GitLab 存储库
                    SCM = checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GITLAB_URL}"]]])
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // 使用时间戳标记构建 Docker 镜像
                    def timestamp = new Date().format("yyyyMMdd-HHmmss")
                    env.dockerImageTag = "nginx:${timestamp}"  // 在更广泛的作用域中定义它（使用'env'使其成为环境变量）

                    // 构建并标记 Docker 镜像
                    sh "docker build -t ${env.dockerImageTag} ."
                    
                    // 使用凭据登录到 Docker 注册表
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD']]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}"
                    }
                    
                    // 推送 Docker 镜像到注册表
                    sh "docker tag ${env.dockerImageTag} ${DOCKER_REGISTRY}/${env.dockerImageTag} && docker push ${DOCKER_REGISTRY}/${env.dockerImageTag}"
                    
                    echo "Docker 镜像已成功推送到注册表"
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // 在随机端口上运行 Docker 容器
                    def allocatedPort = sh(script: "docker run -d -P ${DOCKER_REGISTRY}/${env.dockerImageTag} | xargs docker port | cut -d'-' -f2", returnStdout: true).trim()

                    echo "Docker 容器正在随机端口上运行"
                }
            }
        }
    }

    post {
        always {
            // 清理: 从 Docker 注册表注销
            script {
                sh "docker logout ${DOCKER_REGISTRY}"
            }
        }
    }
}
