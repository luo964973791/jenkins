pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = '172.27.0.8:5000'
        GITLAB_URL = 'http://172.27.0.8:32080/root/demo.git'
        DOCKER_CREDENTIALS_ID = '7bb9b473-44c9-4db0-8ddf-e9d0e26a20fc'
        GITLAB_CREDENTIALS_ID = '5b158f51-7fed-481c-93a4-d6e7fb55b09d'
    }

    stages {
        stage('Git 检出') {
            steps {
                script {
                    ansiColor('xterm') {
                        echo '\u001B[32m中文输出：Git 检出\u001B[0m'
                        checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                                doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [],
                                userRemoteConfigs: [[credentialsId: "${GITLAB_CREDENTIALS_ID}", url: "${GITLAB_URL}"]]])
                    }
                }
            }
        }

        stage('构建并推送 Docker 镜像') {
            steps {
                script {
                    def timestamp = new Date().format("yyyyMMdd-HHmmss")
                    env.dockerImageTag = "nginx:${timestamp}"
                    sh "docker build -t ${env.dockerImageTag} ."

                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_CREDENTIALS_ID}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD']]) {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD} ${DOCKER_REGISTRY}"
                    }
                    sh "docker tag ${env.dockerImageTag} ${DOCKER_REGISTRY}/${env.dockerImageTag} && docker push ${DOCKER_REGISTRY}/${env.dockerImageTag}"

                    ansiColor('xterm') {
                        echo '\u001B[32mDocker 镜像已成功推送到注册表\u001B[0m'
                    }
                }
            }
        }

        stage('漏洞扫描') {
            steps {
                script {
                    sh 'docker pull aquasec/trivy'
                    
                    // Capture the output of the Trivy scan command
                    def trivyReport = sh(script: "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --quiet ${DOCKER_REGISTRY}/${env.dockerImageTag}", returnStdout: true).trim()

                    // Check if there are high severity vulnerabilities and fail the build if any
                    if (trivyReport.contains("High")) {
                        error "High severity vulnerabilities found. Build failed."
                    }
                }
            }
        }

        stage('启动 Docker 服务') {
            steps {
                script {
                    // 生成随机端口号
                    def randomPort = sh(script: 'shuf -i 8000-8999 -n 1', returnStdout: true).trim()
                    
                    // 启动 Docker 服务
                    sh "docker run -d -p ${randomPort}:80 --name nginx-${randomPort} ${DOCKER_REGISTRY}/${env.dockerImageTag}"
                    
                    ansiColor('xterm') {
                        echo "\u001B[32m成功启动 Docker 服务，端口号: ${randomPort}\u001B[0m"
                    }
                }
            }
        }
    }

    post {
        always {
            // 清理: 从 Docker 注册表注销
            script {
                sh "docker logout ${DOCKER_REGISTRY}"
            }
        }
    }
}
